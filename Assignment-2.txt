Ass2:
ReverseClient.java:
import ReverseModule.*;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class ReverseClient {
    public static void main(String[] args) {
        try {
            // Initialize the ORB
            ORB orb = ORB.init(args, null);

            // Get a reference to the Naming Service
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

            // Resolve the object reference
            String name = "Reverse";
            Reverse reverseImpl = ReverseHelper.narrow(ncRef.resolve_str(name));

            // Take user input
            System.out.println("Enter a string to reverse:");
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            String input = br.readLine();

            // Invoke the reverse_string method
            String result = reverseImpl.reverse_string(input);
            System.out.println(result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
 

ReverseImpl.java:
import ReverseModule.ReversePOA;

public class ReverseImpl extends ReversePOA {
    @Override
    public String reverse_string(String str) {
        // Reverse the input string
        StringBuilder reversed = new StringBuilder(str).reverse();
        return "Server sends: " + reversed.toString();
    }
}
ReverseModule.idl:
 

module ReverseModule {
  interface Reverse {
    string reverse_string(in string str);
  };
};
 

ReverseServer.java:
 

import ReverseModule.*;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import org.omg.PortableServer.*;
import org.omg.PortableServer.POA;

public class ReverseServer {
    public static void main(String[] args) {
        try {
            // Initialize the ORB
            ORB orb = ORB.init(args, null);

            // Get reference to RootPOA and activate the POAManager
            POA rootpoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
            rootpoa.the_POAManager().activate();

            // Create the servant and register it with the ORB
            ReverseImpl reverseImpl = new ReverseImpl();
            org.omg.CORBA.Object ref = rootpoa.servant_to_reference(reverseImpl);
            Reverse href = ReverseHelper.narrow(ref);

            // Bind the object reference in the Naming Service
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
            NameComponent path[] = ncRef.to_name("Reverse");
            ncRef.rebind(path, href);

            System.out.println("ReverseServer ready and waiting...");
            orb.run(); // Wait for client requests
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
 

Execute Commands:
Terminal:
# One-time setup
idlj -fall ReverseModule.idl
mkdir Generated
mv ReverseModule Generated/
javac -d . *.java Generated/ReverseModule/*.java
 
# Every time you run
export CLASSPATH=.:Generated
orbd -ORBInitialPort 1050 -defaultdb ./orb.db &
 
# Terminal 1
java ReverseServer -ORBInitialPort 1050 -ORBInitialHost localhost
 
# Terminal 2
java ReverseClient -ORBInitialPort 1050 -ORBInitialHost localhost